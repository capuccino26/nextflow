#!/bin/env nextflow
params.reads = "_{1,2}.fastq.gz"
params.accessions = "accessions.txt"
params.outdir = "results"
workflow {
    setfiles(params.reads)
}
process setfiles {
    tag "Preparing Files for $line"
 
    input:
    path accessions
 
    output:
    path
 
    script:
    """
    #Functions
    filedownload () {
      echo Cleaning files for: $var;
      unlink $var
      echo Downloading $var;
      wget "${url//\"/}"
    }
    
    #Download metadata/check if file exists/download file if not exists/check integrity/download again if corrupted
    while read -r line
    do
      echo "$line"
      ffq "$line" > "$line".json
      elen=`jq '.. | select(.ftp?).ftp' "$line".json | jq length`
      echo FTP Files: "$elen"
      elen=$((--elen))
      while [ $elen -ge 0 ]
      do
        md5=`jq '.[].files.ftp[$i].md5' --argjson i $elen "$line".json`; echo MD5: "$md5"
        url=`jq '.[].files.ftp[$i].url' --argjson i $elen "$line".json`; echo URL: "$url"
        bspl=`jq '.[].sample' "$line".json`; echo BioSample: "$bspl"
        for var in `echo "${url//\"/}" | rev | cut -d "/" -f1 | rev`
        do
          if test -f "$var"
          then
              echo "$var exists"
          else
              echo "Downloading $var";
              filedownload
          fi
          if [[ `md5sum "$var"` == *"${md5//\"/}"* ]]
          then
            echo "File not corrupted."
          else
            echo "File corrupted."
            while [[ `md5sum "$var"` != *"${md5//\"/}"* ]]
            do
              filedownload
              done
          fi
        done
        elen=$((--elen))
        done
    done < "$input"
    """
}

process crttable {
    script:
    """
    echo "ID\tValue"
    for line in \$(seq 1 \$(echo \${#val[@]})); do
        echo "\$line\t\${val[\$line-1]}"
    done > table.txt
    """
}
